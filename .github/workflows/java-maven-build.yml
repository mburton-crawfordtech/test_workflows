# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  workflow_call:
    inputs:
      # pass in java version to allow different app requiring different java versions to 
      # reuse the same workflow, default to java 11
      java-version:
        required: false
        type: string
        default: '11'
      # working-directory is added to accommodate if the pom file is not in root.
      #  defaults to '.', current directory
      working-directory:
        required: false
        type: string
        default: '.'
      # allowing calling workflows to pass in maven parameter(s)
      # such as '-Dmaven.test.skip' for certain apps,
      # default to blank, not to skip test
      maven-params:
        required: false
        type: string
        default: ''


jobs:
  build:

    runs-on: ubuntu-latest

    # This sets the working directory at the job level,
    # defaults to "."
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
    - run: echo '${{ toJSON(github) }}'
    - name: Checkout Code
      uses: actions/checkout@v3

    # Setup the JDK with caching for Maven
    - name: Set up JDK ${{ inputs.java-version }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ inputs.java-version }}
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn --batch-mode clean package ${{ inputs.maven-params }} --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    # - name: Update dependency graph
      # uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
